
p1_function_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001954  08001954  00011954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001994  08001994  0003518c  2**0
                  CONTENTS
  4 .ARM          00000000  08001994  08001994  0003518c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001994  08001994  0003518c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001994  08001994  00011994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001998  08001998  00011998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001518c  20000000  0800199c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2001518c  08016b28  0003518c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200151c0  08016b28  000351c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003518c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005019  00000000  00000000  000351bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011f4  00000000  00000000  0003a1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  0003b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000510  00000000  00000000  0003b998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245a0  00000000  00000000  0003bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006def  00000000  00000000  00060448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de333  00000000  00000000  00067237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014556a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001488  00000000  00000000  001455bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2001518c 	.word	0x2001518c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800193c 	.word	0x0800193c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20015190 	.word	0x20015190
 80001c4:	0800193c 	.word	0x0800193c

080001c8 <DAC_init>:
/**
  * @brief  initialize the SPI peripheral to communicate with the DAC
  * 		pin connections: PA5 -> SPI1_CLK, PA7 -> SPI1_MOSI, PB6 -> SPI1_CS
  * @retval int
  */
void DAC_init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/* enable clock for SPI1 */
	RCC->APB2ENR 		|=  (RCC_APB2ENR_SPI1EN);
 80001cc:	4b2c      	ldr	r3, [pc, #176]	; (8000280 <DAC_init+0xb8>)
 80001ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80001d0:	4a2b      	ldr	r2, [pc, #172]	; (8000280 <DAC_init+0xb8>)
 80001d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001d6:	6613      	str	r3, [r2, #96]	; 0x60

	/* configure GPIOA for PA4 (SPI1 CS), PA5 (SPI1 CLK), PA7 (SPI1 MOSI) */
	RCC->AHB2ENR 		|=  (RCC_AHB2ENR_GPIOAEN);													// enable clock for GPIOA
 80001d8:	4b29      	ldr	r3, [pc, #164]	; (8000280 <DAC_init+0xb8>)
 80001da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001dc:	4a28      	ldr	r2, [pc, #160]	; (8000280 <DAC_init+0xb8>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->AFR[0]   	&= ~(GPIO_AFRL_AFSEL4_Msk | GPIO_AFRL_AFSEL5_Msk | GPIO_AFRL_AFSEL7_Msk);	// clear AFR
 80001e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e8:	6a1b      	ldr	r3, [r3, #32]
 80001ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80001f2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80001f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]		|=  ( (0x5UL << GPIO_AFRL_AFSEL4_Pos) |										// set PA4, PA5, PA7 to AF5
 80001f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001fc:	6a1b      	ldr	r3, [r3, #32]
 80001fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000202:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000206:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 800020a:	6213      	str	r3, [r2, #32]
							  (0x5UL << GPIO_AFRL_AFSEL5_Pos) |
							  (0x5UL << GPIO_AFRL_AFSEL7_Pos) );
	GPIOA->MODER 		&= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE7); 				// clear mode4, mode5 and mode7
 800020c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000216:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800021a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER 		|=  (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE7_1);			// set mode5 and mode7 to alternate function mode
 800021c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000226:	f443 430a 	orr.w	r3, r3, #35328	; 0x8a00
 800022a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER 		&= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT7);					// set OTYPE5 and OTYPE7 to push-pull
 800022c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000236:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 800023a:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR 		|=  (GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED7);	// set OSPEED5 and OPSEED7 to high speed
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f443 434f 	orr.w	r3, r3, #52992	; 0xcf00
 800024a:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR 		&= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD7);				// set PUPD5 and PUPD7 to no pull-up/pull-down
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	68db      	ldr	r3, [r3, #12]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000256:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800025a:	60d3      	str	r3, [r2, #12]

	/* SPI1_CR1
	 * set to master configuration and clk/2 baud rate
	 * */
	SPI1->CR1 			= ( (SPI_CR1_MSTR) );
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <DAC_init+0xbc>)
 800025e:	2204      	movs	r2, #4
 8000260:	601a      	str	r2, [r3, #0]

	/* SPI1_CR2
	 * set data size to 16bit, turn on pulse management and ss output
	 * */
	SPI1->CR2			= ( (DAC_DS << SPI_CR2_DS_Pos) |
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <DAC_init+0xbc>)
 8000264:	f640 720c 	movw	r2, #3852	; 0xf0c
 8000268:	605a      	str	r2, [r3, #4]
							(SPI_CR2_SSOE) |
							(SPI_CR2_NSSP) );

	/* enable peripheral for SPI1 */
	SPI1->CR1			|=  (SPI_CR1_SPE);
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <DAC_init+0xbc>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a05      	ldr	r2, [pc, #20]	; (8000284 <DAC_init+0xbc>)
 8000270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000274:	6013      	str	r3, [r2, #0]
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	40021000 	.word	0x40021000
 8000284:	40013000 	.word	0x40013000

08000288 <DAC_write>:

/**
  * @brief  write a 12-bit value to the DAC
  * @retval int
  */
void DAC_write(uint32_t dig) {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	while(!(SPI1->SR & SPI_SR_TXE));		// wait for empty Tx
 8000290:	bf00      	nop
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <DAC_write+0x30>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	f003 0302 	and.w	r3, r3, #2
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f9      	beq.n	8000292 <DAC_write+0xa>

	/* write data to DAC(A), set to unbuffered with 1x gain in active mode operation */
	SPI1->DR = ( (dig & TWELVE_BIT_MASK) + 0x3000);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <DAC_write+0x30>)
 80002a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80002aa:	60d3      	str	r3, [r2, #12]
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	40013000 	.word	0x40013000

080002bc <config_keypad>:
/**
  * @brief Keypad Configuration
  * @retval None
  */
void config_keypad()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	/* enable clock for GPIOC */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80002c0:	4b20      	ldr	r3, [pc, #128]	; (8000344 <config_keypad+0x88>)
 80002c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c4:	4a1f      	ldr	r2, [pc, #124]	; (8000344 <config_keypad+0x88>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	64d3      	str	r3, [r2, #76]	; 0x4c

	/* configure columns (PC4 through PC6)
	 * all pins output mode, no PUPD, low speed, push-pull otype, set ODR
	 */
	GPIOC->MODER &= ~(		GPIO_MODER_MODE4_Msk |
 80002cc:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <config_keypad+0x8c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <config_keypad+0x8c>)
 80002d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80002d6:	6013      	str	r3, [r2, #0]
							GPIO_MODER_MODE5_Msk |
							GPIO_MODER_MODE6_Msk
							);
	GPIOC->MODER |= (		GPIO_MODER_MODE4_0 |
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <config_keypad+0x8c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a1a      	ldr	r2, [pc, #104]	; (8000348 <config_keypad+0x8c>)
 80002de:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 80002e2:	6013      	str	r3, [r2, #0]
							GPIO_MODER_MODE5_0 |
							GPIO_MODER_MODE6_0
							);
	GPIOC->PUPDR &= ~(		GPIO_PUPDR_PUPD4_Msk |
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <config_keypad+0x8c>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	4a17      	ldr	r2, [pc, #92]	; (8000348 <config_keypad+0x8c>)
 80002ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80002ee:	60d3      	str	r3, [r2, #12]
							GPIO_PUPDR_PUPD5_Msk |
							GPIO_PUPDR_PUPD6_Msk
							);
	GPIOC->OSPEEDR &= ~(	GPIO_OSPEEDR_OSPEED4_Msk |
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <config_keypad+0x8c>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a14      	ldr	r2, [pc, #80]	; (8000348 <config_keypad+0x8c>)
 80002f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80002fa:	6093      	str	r3, [r2, #8]
							GPIO_OSPEEDR_OSPEED5_Msk |
							GPIO_OSPEEDR_OSPEED6_Msk
							);
	GPIOC->OTYPER &= ~(		GPIO_OTYPER_OT4 |
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <config_keypad+0x8c>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <config_keypad+0x8c>)
 8000302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000306:	6053      	str	r3, [r2, #4]
							GPIO_OTYPER_OT5 |
							GPIO_OTYPER_OT6
							);
	GPIOC->ODR |= (			GPIO_ODR_OD4 |
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <config_keypad+0x8c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <config_keypad+0x8c>)
 800030e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000312:	6153      	str	r3, [r2, #20]
							);

	/* configure rows (PC7 - PC10)
	 * all pins input mode, pull down
	 */
	GPIOC->MODER &= ~(		GPIO_MODER_MODE7_Msk |
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <config_keypad+0x8c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <config_keypad+0x8c>)
 800031a:	f423 137f 	bic.w	r3, r3, #4177920	; 0x3fc000
 800031e:	6013      	str	r3, [r2, #0]
							GPIO_MODER_MODE8_Msk |
							GPIO_MODER_MODE9_Msk |
							GPIO_MODER_MODE10_Msk
							);
	GPIOC->PUPDR &= ~(		GPIO_PUPDR_PUPD7_Msk |
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <config_keypad+0x8c>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a08      	ldr	r2, [pc, #32]	; (8000348 <config_keypad+0x8c>)
 8000326:	f423 137f 	bic.w	r3, r3, #4177920	; 0x3fc000
 800032a:	60d3      	str	r3, [r2, #12]
							GPIO_PUPDR_PUPD8_Msk |
							GPIO_PUPDR_PUPD9_Msk |
							GPIO_PUPDR_PUPD10_Msk
							);
	GPIOC->PUPDR |= (		GPIO_PUPDR_PUPD7_1 |
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <config_keypad+0x8c>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4a05      	ldr	r2, [pc, #20]	; (8000348 <config_keypad+0x8c>)
 8000332:	f443 132a 	orr.w	r3, r3, #2785280	; 0x2a8000
 8000336:	60d3      	str	r3, [r2, #12]
							GPIO_PUPDR_PUPD8_1 |
							GPIO_PUPDR_PUPD9_1 |
							GPIO_PUPDR_PUPD10_1
							);
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	48000800 	.word	0x48000800

0800034c <determine_keypress>:
  * @brief Determines if a key has been pressed on keypad.
  * @retval 32-bit integer value of key pressed. -1 on no button press.
  * 		Exception is "*" which returns 14 and "#" which returns 15.
  */
int32_t determine_keypress()
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
	int32_t col;
	int32_t row;
	int32_t keypress;
	int32_t row_input = (GPIOC->IDR & ROW_MASK);
 8000352:	4b2c      	ldr	r3, [pc, #176]	; (8000404 <determine_keypress+0xb8>)
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800035a:	603b      	str	r3, [r7, #0]

	if(row_input == 0)									// if no rows are high
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d102      	bne.n	8000368 <determine_keypress+0x1c>
		return -1;										// no key press has occurred, return -1
 8000362:	f04f 33ff 	mov.w	r3, #4294967295
 8000366:	e047      	b.n	80003f8 <determine_keypress+0xac>

	for(col = COL_0_PIN; col <= COL_2_PIN; col++)		// cycle through columns 0-2
 8000368:	2304      	movs	r3, #4
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	e039      	b.n	80003e2 <determine_keypress+0x96>
	{
		GPIOC->ODR &= ~(COL_MASK);						// turn off all columns
 800036e:	4b25      	ldr	r3, [pc, #148]	; (8000404 <determine_keypress+0xb8>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a24      	ldr	r2, [pc, #144]	; (8000404 <determine_keypress+0xb8>)
 8000374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000378:	6153      	str	r3, [r2, #20]
		GPIOC->ODR |= (1 << col);						// turn on one column
 800037a:	4b22      	ldr	r3, [pc, #136]	; (8000404 <determine_keypress+0xb8>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	2101      	movs	r1, #1
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	fa01 f202 	lsl.w	r2, r1, r2
 8000386:	4611      	mov	r1, r2
 8000388:	4a1e      	ldr	r2, [pc, #120]	; (8000404 <determine_keypress+0xb8>)
 800038a:	430b      	orrs	r3, r1
 800038c:	6153      	str	r3, [r2, #20]
		row_input = (GPIOC->IDR & ROW_MASK);			// read rows
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <determine_keypress+0xb8>)
 8000390:	691b      	ldr	r3, [r3, #16]
 8000392:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8000396:	603b      	str	r3, [r7, #0]
		if (row_input != 0)								// if row is still high
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d01e      	beq.n	80003dc <determine_keypress+0x90>
		{
			col = col - COL_0_PIN + 1;					// get column that is pressed (1-3)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	3b03      	subs	r3, #3
 80003a2:	60fb      	str	r3, [r7, #12]
			row = row_input >> (ROW_0_PIN + 1);			// determine row that is pressed (0-3)
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	121b      	asrs	r3, r3, #8
 80003a8:	60bb      	str	r3, [r7, #8]
			if (row == 4)								// check if in 3rd row
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	d101      	bne.n	80003b4 <determine_keypress+0x68>
				row = 3;
 80003b0:	2303      	movs	r3, #3
 80003b2:	60bb      	str	r3, [r7, #8]
			keypress = 3 * row + col;					// determine value of key pressed (1 - 12)
 80003b4:	68ba      	ldr	r2, [r7, #8]
 80003b6:	4613      	mov	r3, r2
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	4413      	add	r3, r2
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	4413      	add	r3, r2
 80003c0:	607b      	str	r3, [r7, #4]
			if (keypress == 11)							// check if 0 was pressed
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2b0b      	cmp	r3, #11
 80003c6:	d101      	bne.n	80003cc <determine_keypress+0x80>
				keypress = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
			GPIOC->ODR |= COL_MASK;						// turn on all columns
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <determine_keypress+0xb8>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <determine_keypress+0xb8>)
 80003d2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80003d6:	6153      	str	r3, [r2, #20]
			return keypress;							// return key press
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	e00d      	b.n	80003f8 <determine_keypress+0xac>
	for(col = COL_0_PIN; col <= COL_2_PIN; col++)		// cycle through columns 0-2
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3301      	adds	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	2b06      	cmp	r3, #6
 80003e6:	ddc2      	ble.n	800036e <determine_keypress+0x22>
		}
	}

	GPIOC->ODR |= COL_MASK;								// turn on all columns
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <determine_keypress+0xb8>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <determine_keypress+0xb8>)
 80003ee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80003f2:	6153      	str	r3, [r2, #20]
	return -1;											// glitch occurred, return -1
 80003f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	48000800 	.word	0x48000800

08000408 <main>:

/*
* @brief  Initialization and main loop to run project indefinitely.
* @retval int
*/
int main(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
  /* reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040e:	f000 fae2 	bl	80009d6 <HAL_Init>

  /* configure the system clock */
  SystemClock_Config();
 8000412:	f000 f989 	bl	8000728 <SystemClock_Config>

  /* initialize state, waveform data, index, frequency, and duty cycle for 100Hz 50% duty square wave */
  waveform_data = SQUARE_LUT_50;	// 50% square waveform LUT
 8000416:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <main+0x8c>)
 8000418:	4a1f      	ldr	r2, [pc, #124]	; (8000498 <main+0x90>)
 800041a:	601a      	str	r2, [r3, #0]
  square_wave_flag = 1;				// set square wave flag high
 800041c:	4b1f      	ldr	r3, [pc, #124]	; (800049c <main+0x94>)
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
  waveform_index = 0;				// initial index of LUT is 0
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <main+0x98>)
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
  waveform_freq = 1;				// 100Hz
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <main+0x9c>)
 800042a:	2201      	movs	r2, #1
 800042c:	601a      	str	r2, [r3, #0]
  waveform_duty = 5;				// 50%
 800042e:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <main+0xa0>)
 8000430:	2205      	movs	r2, #5
 8000432:	601a      	str	r2, [r3, #0]

  /* configure keypad, timer, and dac */
  config_keypad();
 8000434:	f7ff ff42 	bl	80002bc <config_keypad>
  TIM2_config();
 8000438:	f000 fa22 	bl	8000880 <TIM2_config>
  DAC_init();
 800043c:	f7ff fec4 	bl	80001c8 <DAC_init>

  /* initialize local variables */
  int32_t key_pressed = -1;
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	607b      	str	r3, [r7, #4]

  /* infinite loop */
  while (1) {
	  /* wait for keypad input */
	  while(key_pressed == -1) {
 8000446:	e002      	b.n	800044e <main+0x46>
		  key_pressed = determine_keypress();
 8000448:	f7ff ff80 	bl	800034c <determine_keypress>
 800044c:	6078      	str	r0, [r7, #4]
	  while(key_pressed == -1) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000454:	d0f8      	beq.n	8000448 <main+0x40>
	  }

	  /* execute changes based off key pressed */
	  change_waveform(key_pressed);
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 f828 	bl	80004ac <change_waveform>

	  /* wait for keypad to be released (with debounce) */
	  while(1) {
		  key_pressed = determine_keypress();		// check keypress value
 800045c:	f7ff ff76 	bl	800034c <determine_keypress>
 8000460:	6078      	str	r0, [r7, #4]
		  if(key_pressed == -1) {					// check if key is let go
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000468:	d1f8      	bne.n	800045c <main+0x54>
			  for(int i = 0; i < 50000; i++);		// delay for debounce
 800046a:	2300      	movs	r3, #0
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	e002      	b.n	8000476 <main+0x6e>
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	603b      	str	r3, [r7, #0]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800047c:	4293      	cmp	r3, r2
 800047e:	ddf7      	ble.n	8000470 <main+0x68>
			  key_pressed = determine_keypress();	// check keypress value again
 8000480:	f7ff ff64 	bl	800034c <determine_keypress>
 8000484:	6078      	str	r0, [r7, #4]
			  if(key_pressed == -1) {				// check if key is still let go
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800048c:	d000      	beq.n	8000490 <main+0x88>
		  key_pressed = determine_keypress();		// check keypress value
 800048e:	e7e5      	b.n	800045c <main+0x54>
				  break;
 8000490:	bf00      	nop
	  while(key_pressed == -1) {
 8000492:	e7dc      	b.n	800044e <main+0x46>
 8000494:	200151a8 	.word	0x200151a8
 8000498:	20007080 	.word	0x20007080
 800049c:	200151b8 	.word	0x200151b8
 80004a0:	200151ac 	.word	0x200151ac
 80004a4:	200151b0 	.word	0x200151b0
 80004a8:	200151b4 	.word	0x200151b4

080004ac <change_waveform>:

/*
* @brief  Changes waveform settings based off given key press.
* @retval void
*/
void change_waveform(int32_t key_pressed) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  switch (key_pressed) {
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b0c      	cmp	r3, #12
 80004b8:	f200 80a7 	bhi.w	800060a <change_waveform+0x15e>
 80004bc:	a201      	add	r2, pc, #4	; (adr r2, 80004c4 <change_waveform+0x18>)
 80004be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c2:	bf00      	nop
 80004c4:	080004f9 	.word	0x080004f9
 80004c8:	08000515 	.word	0x08000515
 80004cc:	08000523 	.word	0x08000523
 80004d0:	08000531 	.word	0x08000531
 80004d4:	0800053f 	.word	0x0800053f
 80004d8:	0800054d 	.word	0x0800054d
 80004dc:	0800055b 	.word	0x0800055b
 80004e0:	0800056f 	.word	0x0800056f
 80004e4:	08000583 	.word	0x08000583
 80004e8:	08000597 	.word	0x08000597
 80004ec:	080005b3 	.word	0x080005b3
 80004f0:	0800060b 	.word	0x0800060b
 80004f4:	080005df 	.word	0x080005df
	  case 0:	// set duty cycle to 50%
		  if (square_wave_flag) {
 80004f8:	4b50      	ldr	r3, [pc, #320]	; (800063c <change_waveform+0x190>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	f000 8091 	beq.w	8000624 <change_waveform+0x178>
			  waveform_duty = 5;
 8000502:	4b4f      	ldr	r3, [pc, #316]	; (8000640 <change_waveform+0x194>)
 8000504:	2205      	movs	r2, #5
 8000506:	601a      	str	r2, [r3, #0]
			  _change_waveform_duty(waveform_duty);
 8000508:	4b4d      	ldr	r3, [pc, #308]	; (8000640 <change_waveform+0x194>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f8a7 	bl	8000660 <_change_waveform_duty>
		  }
		  break;
 8000512:	e087      	b.n	8000624 <change_waveform+0x178>
	  case 1:	// set frequency to 100Hz
		  waveform_index = 0;
 8000514:	4b4b      	ldr	r3, [pc, #300]	; (8000644 <change_waveform+0x198>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
		  waveform_freq = 1;
 800051a:	4b4b      	ldr	r3, [pc, #300]	; (8000648 <change_waveform+0x19c>)
 800051c:	2201      	movs	r2, #1
 800051e:	601a      	str	r2, [r3, #0]
		  break;
 8000520:	e087      	b.n	8000632 <change_waveform+0x186>
	  case 2:	// set frequency to 200Hz
		  waveform_index = 0;
 8000522:	4b48      	ldr	r3, [pc, #288]	; (8000644 <change_waveform+0x198>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
		  waveform_freq = 2;
 8000528:	4b47      	ldr	r3, [pc, #284]	; (8000648 <change_waveform+0x19c>)
 800052a:	2202      	movs	r2, #2
 800052c:	601a      	str	r2, [r3, #0]
		  break;
 800052e:	e080      	b.n	8000632 <change_waveform+0x186>
	  case 3:	// set frequency to 300Hz
		  waveform_index = 0;
 8000530:	4b44      	ldr	r3, [pc, #272]	; (8000644 <change_waveform+0x198>)
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
		  waveform_freq = 3;
 8000536:	4b44      	ldr	r3, [pc, #272]	; (8000648 <change_waveform+0x19c>)
 8000538:	2203      	movs	r2, #3
 800053a:	601a      	str	r2, [r3, #0]
		  break;
 800053c:	e079      	b.n	8000632 <change_waveform+0x186>
	  case 4:	// set frequency to 400Hz
		  waveform_index = 0;
 800053e:	4b41      	ldr	r3, [pc, #260]	; (8000644 <change_waveform+0x198>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
		  waveform_freq = 4;
 8000544:	4b40      	ldr	r3, [pc, #256]	; (8000648 <change_waveform+0x19c>)
 8000546:	2204      	movs	r2, #4
 8000548:	601a      	str	r2, [r3, #0]
		  break;
 800054a:	e072      	b.n	8000632 <change_waveform+0x186>
	  case 5:	// set frequency to 500Hz
		  waveform_index = 0;
 800054c:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <change_waveform+0x198>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
		  waveform_freq = 5;
 8000552:	4b3d      	ldr	r3, [pc, #244]	; (8000648 <change_waveform+0x19c>)
 8000554:	2205      	movs	r2, #5
 8000556:	601a      	str	r2, [r3, #0]
		  break;
 8000558:	e06b      	b.n	8000632 <change_waveform+0x186>
	  case 6:	// change to sine wave
		  waveform_index = 0;
 800055a:	4b3a      	ldr	r3, [pc, #232]	; (8000644 <change_waveform+0x198>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
		  waveform_data = SIN_LUT;
 8000560:	4b3a      	ldr	r3, [pc, #232]	; (800064c <change_waveform+0x1a0>)
 8000562:	4a3b      	ldr	r2, [pc, #236]	; (8000650 <change_waveform+0x1a4>)
 8000564:	601a      	str	r2, [r3, #0]
		  square_wave_flag = 0;
 8000566:	4b35      	ldr	r3, [pc, #212]	; (800063c <change_waveform+0x190>)
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
		  break;
 800056c:	e061      	b.n	8000632 <change_waveform+0x186>
	  case 7:	// change to triangle wave
		  waveform_index = 0;
 800056e:	4b35      	ldr	r3, [pc, #212]	; (8000644 <change_waveform+0x198>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
		  waveform_data = TRIANGLE_LUT;
 8000574:	4b35      	ldr	r3, [pc, #212]	; (800064c <change_waveform+0x1a0>)
 8000576:	4a37      	ldr	r2, [pc, #220]	; (8000654 <change_waveform+0x1a8>)
 8000578:	601a      	str	r2, [r3, #0]
		  square_wave_flag = 0;
 800057a:	4b30      	ldr	r3, [pc, #192]	; (800063c <change_waveform+0x190>)
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
		  break;
 8000580:	e057      	b.n	8000632 <change_waveform+0x186>
	  case 8:	// change to ramp wave
		  waveform_index = 0;
 8000582:	4b30      	ldr	r3, [pc, #192]	; (8000644 <change_waveform+0x198>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
		  waveform_data = RAMP_LUT;
 8000588:	4b30      	ldr	r3, [pc, #192]	; (800064c <change_waveform+0x1a0>)
 800058a:	4a33      	ldr	r2, [pc, #204]	; (8000658 <change_waveform+0x1ac>)
 800058c:	601a      	str	r2, [r3, #0]
		  square_wave_flag = 0;
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <change_waveform+0x190>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
		  break;
 8000594:	e04d      	b.n	8000632 <change_waveform+0x186>
	  case 9:	// change to square wave
		  if (!square_wave_flag) {
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <change_waveform+0x190>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d144      	bne.n	8000628 <change_waveform+0x17c>
			  waveform_index = 0;
 800059e:	4b29      	ldr	r3, [pc, #164]	; (8000644 <change_waveform+0x198>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
			  waveform_data = SQUARE_LUT_50;
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <change_waveform+0x1a0>)
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <change_waveform+0x1b0>)
 80005a8:	601a      	str	r2, [r3, #0]
			  square_wave_flag = 1;
 80005aa:	4b24      	ldr	r3, [pc, #144]	; (800063c <change_waveform+0x190>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
		  }
		  break;
 80005b0:	e03a      	b.n	8000628 <change_waveform+0x17c>
	  case 10:	// * input, decrease duty cycle by 10%
		  if (square_wave_flag) {
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <change_waveform+0x190>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d038      	beq.n	800062c <change_waveform+0x180>
			  waveform_duty -= 1;
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <change_waveform+0x194>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a1f      	ldr	r2, [pc, #124]	; (8000640 <change_waveform+0x194>)
 80005c2:	6013      	str	r3, [r2, #0]
			  if (waveform_duty < 1) {	// duty cycle cannot be less than 10%
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <change_waveform+0x194>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <change_waveform+0x126>
				  waveform_duty = 1;
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <change_waveform+0x194>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	601a      	str	r2, [r3, #0]
			  }
			  _change_waveform_duty(waveform_duty);
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <change_waveform+0x194>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f842 	bl	8000660 <_change_waveform_duty>
		  }
		  break;
 80005dc:	e026      	b.n	800062c <change_waveform+0x180>
	  case 12:	// # input, increase duty cycle by 10%
		  if (square_wave_flag) {
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <change_waveform+0x190>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d024      	beq.n	8000630 <change_waveform+0x184>
			  waveform_duty += 1;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <change_waveform+0x194>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <change_waveform+0x194>)
 80005ee:	6013      	str	r3, [r2, #0]
			  if (waveform_duty > 9) {	// duty cycle cannot be greater than 90%
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <change_waveform+0x194>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b09      	cmp	r3, #9
 80005f6:	d902      	bls.n	80005fe <change_waveform+0x152>
				  waveform_duty = 9;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <change_waveform+0x194>)
 80005fa:	2209      	movs	r2, #9
 80005fc:	601a      	str	r2, [r3, #0]
			  }
			  _change_waveform_duty(waveform_duty);
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <change_waveform+0x194>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f82c 	bl	8000660 <_change_waveform_duty>
		  }
		  break;
 8000608:	e012      	b.n	8000630 <change_waveform+0x184>
	  default:	// catch-all, return to initial waveform
		  waveform_data = SQUARE_LUT_50;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <change_waveform+0x1a0>)
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <change_waveform+0x1b0>)
 800060e:	601a      	str	r2, [r3, #0]
		  waveform_index = 0;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <change_waveform+0x198>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
		  waveform_freq = 1;	// 100Hz
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <change_waveform+0x19c>)
 8000618:	2201      	movs	r2, #1
 800061a:	601a      	str	r2, [r3, #0]
		  waveform_duty = 5;	// 50%
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <change_waveform+0x194>)
 800061e:	2205      	movs	r2, #5
 8000620:	601a      	str	r2, [r3, #0]
		  break;
 8000622:	e006      	b.n	8000632 <change_waveform+0x186>
		  break;
 8000624:	bf00      	nop
 8000626:	e004      	b.n	8000632 <change_waveform+0x186>
		  break;
 8000628:	bf00      	nop
 800062a:	e002      	b.n	8000632 <change_waveform+0x186>
		  break;
 800062c:	bf00      	nop
 800062e:	e000      	b.n	8000632 <change_waveform+0x186>
		  break;
 8000630:	bf00      	nop
  }
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200151b8 	.word	0x200151b8
 8000640:	200151b4 	.word	0x200151b4
 8000644:	200151ac 	.word	0x200151ac
 8000648:	200151b0 	.word	0x200151b0
 800064c:	200151a8 	.word	0x200151a8
 8000650:	2000fd20 	.word	0x2000fd20
 8000654:	20011940 	.word	0x20011940
 8000658:	20013560 	.word	0x20013560
 800065c:	20007080 	.word	0x20007080

08000660 <_change_waveform_duty>:

/**
  * @brief Changes waveform LUT for square wave based on given duty cycle
  * @retval None
  */
void _change_waveform_duty(uint32_t duty_cycle) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	switch(duty_cycle) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3b01      	subs	r3, #1
 800066c:	2b08      	cmp	r3, #8
 800066e:	d839      	bhi.n	80006e4 <_change_waveform_duty+0x84>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <_change_waveform_duty+0x18>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	0800069d 	.word	0x0800069d
 800067c:	080006a5 	.word	0x080006a5
 8000680:	080006ad 	.word	0x080006ad
 8000684:	080006b5 	.word	0x080006b5
 8000688:	080006bd 	.word	0x080006bd
 800068c:	080006c5 	.word	0x080006c5
 8000690:	080006cd 	.word	0x080006cd
 8000694:	080006d5 	.word	0x080006d5
 8000698:	080006dd 	.word	0x080006dd
		case (1):
			waveform_data = SQUARE_LUT_10;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <_change_waveform_duty+0x9c>)
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <_change_waveform_duty+0xa0>)
 80006a0:	601a      	str	r2, [r3, #0]
			break;
 80006a2:	e022      	b.n	80006ea <_change_waveform_duty+0x8a>
		case (2):
			waveform_data = SQUARE_LUT_20;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <_change_waveform_duty+0x9c>)
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <_change_waveform_duty+0xa4>)
 80006a8:	601a      	str	r2, [r3, #0]
			break;
 80006aa:	e01e      	b.n	80006ea <_change_waveform_duty+0x8a>
		case (3):
			waveform_data = SQUARE_LUT_30;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <_change_waveform_duty+0x9c>)
 80006ae:	4a16      	ldr	r2, [pc, #88]	; (8000708 <_change_waveform_duty+0xa8>)
 80006b0:	601a      	str	r2, [r3, #0]
			break;
 80006b2:	e01a      	b.n	80006ea <_change_waveform_duty+0x8a>
		case (4):
			waveform_data = SQUARE_LUT_40;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <_change_waveform_duty+0x9c>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <_change_waveform_duty+0xac>)
 80006b8:	601a      	str	r2, [r3, #0]
			break;
 80006ba:	e016      	b.n	80006ea <_change_waveform_duty+0x8a>
		case (5):
			waveform_data = SQUARE_LUT_50;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <_change_waveform_duty+0x9c>)
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <_change_waveform_duty+0xb0>)
 80006c0:	601a      	str	r2, [r3, #0]
			break;
 80006c2:	e012      	b.n	80006ea <_change_waveform_duty+0x8a>
		case (6):
			waveform_data = SQUARE_LUT_60;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <_change_waveform_duty+0x9c>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <_change_waveform_duty+0xb4>)
 80006c8:	601a      	str	r2, [r3, #0]
			break;
 80006ca:	e00e      	b.n	80006ea <_change_waveform_duty+0x8a>
		case (7):
			waveform_data = SQUARE_LUT_70;
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <_change_waveform_duty+0x9c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <_change_waveform_duty+0xb8>)
 80006d0:	601a      	str	r2, [r3, #0]
			break;
 80006d2:	e00a      	b.n	80006ea <_change_waveform_duty+0x8a>
		case (8):
			waveform_data = SQUARE_LUT_80;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <_change_waveform_duty+0x9c>)
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <_change_waveform_duty+0xbc>)
 80006d8:	601a      	str	r2, [r3, #0]
			break;
 80006da:	e006      	b.n	80006ea <_change_waveform_duty+0x8a>
		case (9):
			waveform_data = SQUARE_LUT_90;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <_change_waveform_duty+0x9c>)
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <_change_waveform_duty+0xc0>)
 80006e0:	601a      	str	r2, [r3, #0]
			break;
 80006e2:	e002      	b.n	80006ea <_change_waveform_duty+0x8a>
		default:
			waveform_data = SQUARE_LUT_50;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <_change_waveform_duty+0x9c>)
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <_change_waveform_duty+0xb0>)
 80006e8:	601a      	str	r2, [r3, #0]
	}

	waveform_index = 0;		// reset index
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <_change_waveform_duty+0xc4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	200151a8 	.word	0x200151a8
 8000700:	20000000 	.word	0x20000000
 8000704:	20001c20 	.word	0x20001c20
 8000708:	20003840 	.word	0x20003840
 800070c:	20005460 	.word	0x20005460
 8000710:	20007080 	.word	0x20007080
 8000714:	20008ca0 	.word	0x20008ca0
 8000718:	2000a8c0 	.word	0x2000a8c0
 800071c:	2000c4e0 	.word	0x2000c4e0
 8000720:	2000e100 	.word	0x2000e100
 8000724:	200151ac 	.word	0x200151ac

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b096      	sub	sp, #88	; 0x58
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2244      	movs	r2, #68	; 0x44
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f8f8 	bl	800192c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800074a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074e:	f000 faab 	bl	8000ca8 <HAL_PWREx_ControlVoltageScaling>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000758:	f000 f82c 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800075c:	2310      	movs	r3, #16
 800075e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	633b      	str	r3, [r7, #48]	; 0x30
  //RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;	// 4 MHz
  //RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;	// 24 MHz
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;	// 32 MHz using
 8000768:	23a0      	movs	r3, #160	; 0xa0
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076c:	2300      	movs	r3, #0
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4618      	mov	r0, r3
 8000776:	f000 faed 	bl	8000d54 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000780:	f000 f818 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f000 feb5 	bl	800150c <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007a8:	f000 f804 	bl	80007b4 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3758      	adds	r7, #88	; 0x58
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_MspInit+0x44>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6613      	str	r3, [r2, #96]	; 0x60
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_MspInit+0x44>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x44>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x44>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f914 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <SystemInit+0x20>)
 8000862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <SystemInit+0x20>)
 8000868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800086c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <TIM2_config>:

/**
  * @brief configures TIM2
  * @retval None
  */
void TIM2_config(void) {
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 	|= (RCC_APB1ENR1_TIM2EN);	// enable clock for TIM2
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <TIM2_config+0x88>)
 8000886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000888:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <TIM2_config+0x88>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->DIER 		|= (TIM_DIER_UIE);			// enable update interrupt
 8000890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	60d3      	str	r3, [r2, #12]
	TIM2->DIER		|= (TIM_DIER_CC1IE);		// enable capture compare 1 interrupt
 80008a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	60d3      	str	r3, [r2, #12]
	TIM2->SR 		&= ~(TIM_SR_UIF);			// clear update interrupt flag
 80008b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ba:	f023 0301 	bic.w	r3, r3, #1
 80008be:	6113      	str	r3, [r2, #16]
	TIM2->SR 		&= ~(TIM_SR_CC1IF);			// clear capture compare 1 interrupt flag
 80008c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ca:	f023 0302 	bic.w	r3, r3, #2
 80008ce:	6113      	str	r3, [r2, #16]
	TIM2->ARR		 = 0xFFFFFFFF;				// 4 MHz clock, counting to max number
 80008d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1  	 = TIM2_CCR1_CYCLES - 1;	// set capture compare 1
 80008da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008de:	22c7      	movs	r2, #199	; 0xc7
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CR1 		|= (TIM_CR1_CEN);			// enable TIM2
 80008e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]

	// enable interrupts in NVIC
	NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F));
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <TIM2_config+0x8c>)
 80008f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008fa:	b662      	cpsie	i
}
 80008fc:	bf00      	nop

	// enable interrupts globally
	__enable_irq();
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000
 800090c:	e000e100 	.word	0xe000e100

08000910 <TIM2_IRQHandler>:

/**
  * @brief Interrupt service routine for TIM2
  * @retval None
  */
void TIM2_IRQHandler(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF) {					// if capture compare 1 interrupt flag is set
 8000914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	2b00      	cmp	r3, #0
 8000920:	d027      	beq.n	8000972 <TIM2_IRQHandler+0x62>
		TIM2->CCR1 += TIM2_CCR1_CYCLES;				// increment CCR1
 8000922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092c:	33c8      	adds	r3, #200	; 0xc8
 800092e:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->SR &= ~(TIM_SR_CC1IF);				// clear flag
 8000930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093a:	f023 0302 	bic.w	r3, r3, #2
 800093e:	6113      	str	r3, [r2, #16]
		DAC_write(waveform_data[waveform_index]);	// write to DAC
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <TIM2_IRQHandler+0x68>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <TIM2_IRQHandler+0x6c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4413      	add	r3, r2
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fc9a 	bl	8000288 <DAC_write>
		waveform_index += waveform_freq;			// increment waveform index
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <TIM2_IRQHandler+0x6c>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <TIM2_IRQHandler+0x70>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4413      	add	r3, r2
 800095e:	4a07      	ldr	r2, [pc, #28]	; (800097c <TIM2_IRQHandler+0x6c>)
 8000960:	6013      	str	r3, [r2, #0]
		if (waveform_index == LUT_SIZE) {			// check for waveform index overflow
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <TIM2_IRQHandler+0x6c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800096a:	d102      	bne.n	8000972 <TIM2_IRQHandler+0x62>
			waveform_index = 0;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <TIM2_IRQHandler+0x6c>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200151a8 	.word	0x200151a8
 800097c:	200151ac 	.word	0x200151ac
 8000980:	200151b0 	.word	0x200151b0

08000984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000988:	f7ff ff68 	bl	800085c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	; (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f000 ff97 	bl	80018e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b6:	f7ff fd27 	bl	8000408 <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2001518c 	.word	0x2001518c
  ldr r2, =_sidata
 80009c8:	0800199c 	.word	0x0800199c
  ldr r2, =_sbss
 80009cc:	2001518c 	.word	0x2001518c
  ldr r4, =_ebss
 80009d0:	200151c0 	.word	0x200151c0

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>

080009d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f91f 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f80e 	bl	8000a08 <HAL_InitTick>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e001      	b.n	80009fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f8:	f7ff fee2 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d023      	beq.n	8000a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_InitTick+0x70>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f91d 	bl	8000c72 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10f      	bne.n	8000a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d809      	bhi.n	8000a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f8f5 	bl	8000c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0x74>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e007      	b.n	8000a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e001      	b.n	8000a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20015188 	.word	0x20015188
 8000a78:	20015180 	.word	0x20015180
 8000a7c:	20015184 	.word	0x20015184

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20015188 	.word	0x20015188
 8000aa4:	200151bc 	.word	0x200151bc

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200151bc 	.word	0x200151bc

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff47 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff5c 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffb0 	bl	8000be0 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb6:	d130      	bne.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cc4:	d038      	beq.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cce:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2232      	movs	r2, #50	; 0x32
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9b      	lsrs	r3, r3, #18
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cec:	e002      	b.n	8000cf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d00:	d102      	bne.n	8000d08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f2      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d14:	d110      	bne.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e00f      	b.n	8000d3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d26:	d007      	beq.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40007000 	.word	0x40007000
 8000d4c:	20015180 	.word	0x20015180
 8000d50:	431bde83 	.word	0x431bde83

08000d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e3ca      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d66:	4b97      	ldr	r3, [pc, #604]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d70:	4b94      	ldr	r3, [pc, #592]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80e4 	beq.w	8000f50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d007      	beq.n	8000d9e <HAL_RCC_OscConfig+0x4a>
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	2b0c      	cmp	r3, #12
 8000d92:	f040 808b 	bne.w	8000eac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	f040 8087 	bne.w	8000eac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d9e:	4b89      	ldr	r3, [pc, #548]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_RCC_OscConfig+0x62>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e3a2      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a1a      	ldr	r2, [r3, #32]
 8000dba:	4b82      	ldr	r3, [pc, #520]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d004      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x7c>
 8000dc6:	4b7f      	ldr	r3, [pc, #508]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dce:	e005      	b.n	8000ddc <HAL_RCC_OscConfig+0x88>
 8000dd0:	4b7c      	ldr	r3, [pc, #496]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d223      	bcs.n	8000e28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 fd1d 	bl	8001824 <RCC_SetFlashLatencyFromMSIRange>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e383      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000df4:	4b73      	ldr	r3, [pc, #460]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a72      	ldr	r2, [pc, #456]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	496d      	ldr	r1, [pc, #436]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e12:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	4968      	ldr	r1, [pc, #416]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	604b      	str	r3, [r1, #4]
 8000e26:	e025      	b.n	8000e74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e28:	4b66      	ldr	r3, [pc, #408]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a65      	ldr	r2, [pc, #404]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4960      	ldr	r1, [pc, #384]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e46:	4b5f      	ldr	r3, [pc, #380]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	495b      	ldr	r1, [pc, #364]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d109      	bne.n	8000e74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fcdd 	bl	8001824 <RCC_SetFlashLatencyFromMSIRange>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e343      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e74:	f000 fc4a 	bl	800170c <HAL_RCC_GetSysClockFreq>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	4b52      	ldr	r3, [pc, #328]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	091b      	lsrs	r3, r3, #4
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	4950      	ldr	r1, [pc, #320]	; (8000fc8 <HAL_RCC_OscConfig+0x274>)
 8000e86:	5ccb      	ldrb	r3, [r1, r3]
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_RCC_OscConfig+0x278>)
 8000e92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e94:	4b4e      	ldr	r3, [pc, #312]	; (8000fd0 <HAL_RCC_OscConfig+0x27c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fdb5 	bl	8000a08 <HAL_InitTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d052      	beq.n	8000f4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	e327      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d032      	beq.n	8000f1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a42      	ldr	r2, [pc, #264]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fdf2 	bl	8000aa8 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fdee 	bl	8000aa8 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e310      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee6:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a36      	ldr	r2, [pc, #216]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4931      	ldr	r1, [pc, #196]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f04:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	492c      	ldr	r1, [pc, #176]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]
 8000f18:	e01a      	b.n	8000f50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fdbf 	bl	8000aa8 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fdbb 	bl	8000aa8 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e2dd      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f0      	bne.n	8000f2e <HAL_RCC_OscConfig+0x1da>
 8000f4c:	e000      	b.n	8000f50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d074      	beq.n	8001046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d005      	beq.n	8000f6e <HAL_RCC_OscConfig+0x21a>
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2b0c      	cmp	r3, #12
 8000f66:	d10e      	bne.n	8000f86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d10b      	bne.n	8000f86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d064      	beq.n	8001044 <HAL_RCC_OscConfig+0x2f0>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d160      	bne.n	8001044 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e2ba      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8e:	d106      	bne.n	8000f9e <HAL_RCC_OscConfig+0x24a>
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e026      	b.n	8000fec <HAL_RCC_OscConfig+0x298>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa6:	d115      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x280>
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a02      	ldr	r2, [pc, #8]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e014      	b.n	8000fec <HAL_RCC_OscConfig+0x298>
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	08001954 	.word	0x08001954
 8000fcc:	20015180 	.word	0x20015180
 8000fd0:	20015184 	.word	0x20015184
 8000fd4:	4ba0      	ldr	r3, [pc, #640]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a9f      	ldr	r2, [pc, #636]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b9d      	ldr	r3, [pc, #628]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a9c      	ldr	r2, [pc, #624]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fd58 	bl	8000aa8 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fd54 	bl	8000aa8 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e276      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100e:	4b92      	ldr	r3, [pc, #584]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0x2a8>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101c:	f7ff fd44 	bl	8000aa8 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fd40 	bl	8000aa8 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e262      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001036:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x2d0>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d060      	beq.n	8001114 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d005      	beq.n	8001064 <HAL_RCC_OscConfig+0x310>
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2b0c      	cmp	r3, #12
 800105c:	d119      	bne.n	8001092 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d116      	bne.n	8001092 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001064:	4b7c      	ldr	r3, [pc, #496]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_RCC_OscConfig+0x328>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e23f      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b76      	ldr	r3, [pc, #472]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	061b      	lsls	r3, r3, #24
 800108a:	4973      	ldr	r1, [pc, #460]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001090:	e040      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d023      	beq.n	80010e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109a:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a6e      	ldr	r2, [pc, #440]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a6:	f7ff fcff 	bl	8000aa8 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fcfb 	bl	8000aa8 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e21d      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c0:	4b65      	ldr	r3, [pc, #404]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b62      	ldr	r3, [pc, #392]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	495f      	ldr	r1, [pc, #380]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
 80010e0:	e018      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a5c      	ldr	r2, [pc, #368]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80010e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ee:	f7ff fcdb 	bl	8000aa8 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f6:	f7ff fcd7 	bl	8000aa8 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e1f9      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001108:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f0      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d03c      	beq.n	800119a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01c      	beq.n	8001162 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001128:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800112a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112e:	4a4a      	ldr	r2, [pc, #296]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff fcb6 	bl	8000aa8 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fcb2 	bl	8000aa8 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e1d4      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8001154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ef      	beq.n	8001140 <HAL_RCC_OscConfig+0x3ec>
 8001160:	e01b      	b.n	800119a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001162:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8001164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001168:	4a3b      	ldr	r2, [pc, #236]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001172:	f7ff fc99 	bl	8000aa8 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fc95 	bl	8000aa8 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1b7      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1ef      	bne.n	800117a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80a6 	beq.w	80012f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10d      	bne.n	80011d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	4a26      	ldr	r2, [pc, #152]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c2:	6593      	str	r3, [r2, #88]	; 0x58
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d0:	2301      	movs	r3, #1
 80011d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_RCC_OscConfig+0x508>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d118      	bne.n	8001212 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <HAL_RCC_OscConfig+0x508>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_RCC_OscConfig+0x508>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ec:	f7ff fc5c 	bl	8000aa8 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f4:	f7ff fc58 	bl	8000aa8 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e17a      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_RCC_OscConfig+0x508>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <HAL_RCC_OscConfig+0x4d8>
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800122a:	e029      	b.n	8001280 <HAL_RCC_OscConfig+0x52c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d115      	bne.n	8001260 <HAL_RCC_OscConfig+0x50c>
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124a:	4a03      	ldr	r2, [pc, #12]	; (8001258 <HAL_RCC_OscConfig+0x504>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001254:	e014      	b.n	8001280 <HAL_RCC_OscConfig+0x52c>
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
 8001260:	4b9c      	ldr	r3, [pc, #624]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001266:	4a9b      	ldr	r2, [pc, #620]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001270:	4b98      	ldr	r3, [pc, #608]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001276:	4a97      	ldr	r2, [pc, #604]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001278:	f023 0304 	bic.w	r3, r3, #4
 800127c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d016      	beq.n	80012b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff fc0e 	bl	8000aa8 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001290:	f7ff fc0a 	bl	8000aa8 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	; 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e12a      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012a6:	4b8b      	ldr	r3, [pc, #556]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80012a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ed      	beq.n	8001290 <HAL_RCC_OscConfig+0x53c>
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b6:	f7ff fbf7 	bl	8000aa8 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fbf3 	bl	8000aa8 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e113      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d4:	4b7f      	ldr	r3, [pc, #508]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ed      	bne.n	80012be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e8:	4b7a      	ldr	r3, [pc, #488]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ec:	4a79      	ldr	r2, [pc, #484]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80012ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80fe 	beq.w	80014fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	2b02      	cmp	r3, #2
 8001304:	f040 80d0 	bne.w	80014a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001308:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	429a      	cmp	r2, r3
 800131a:	d130      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	3b01      	subs	r3, #1
 8001328:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800132a:	429a      	cmp	r2, r3
 800132c:	d127      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001338:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800133a:	429a      	cmp	r2, r3
 800133c:	d11f      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001348:	2a07      	cmp	r2, #7
 800134a:	bf14      	ite	ne
 800134c:	2201      	movne	r2, #1
 800134e:	2200      	moveq	r2, #0
 8001350:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001352:	4293      	cmp	r3, r2
 8001354:	d113      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	3b01      	subs	r3, #1
 8001364:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d109      	bne.n	800137e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	3b01      	subs	r3, #1
 8001378:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d06e      	beq.n	800145c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b0c      	cmp	r3, #12
 8001382:	d069      	beq.n	8001458 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001384:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d105      	bne.n	800139c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001390:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0ad      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013a0:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80013a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013ac:	f7ff fb7c 	bl	8000aa8 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff fb78 	bl	8000aa8 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e09a      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c6:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d2:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <HAL_RCC_OscConfig+0x784>)
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013e2:	3a01      	subs	r2, #1
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	4311      	orrs	r1, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ec:	0212      	lsls	r2, r2, #8
 80013ee:	4311      	orrs	r1, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013f4:	0852      	lsrs	r2, r2, #1
 80013f6:	3a01      	subs	r2, #1
 80013f8:	0552      	lsls	r2, r2, #21
 80013fa:	4311      	orrs	r1, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001400:	0852      	lsrs	r2, r2, #1
 8001402:	3a01      	subs	r2, #1
 8001404:	0652      	lsls	r2, r2, #25
 8001406:	4311      	orrs	r1, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800140c:	0912      	lsrs	r2, r2, #4
 800140e:	0452      	lsls	r2, r2, #17
 8001410:	430a      	orrs	r2, r1
 8001412:	4930      	ldr	r1, [pc, #192]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001414:	4313      	orrs	r3, r2
 8001416:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800141e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001422:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4a2a      	ldr	r2, [pc, #168]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001430:	f7ff fb3a 	bl	8000aa8 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001438:	f7ff fb36 	bl	8000aa8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e058      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001456:	e050      	b.n	80014fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e04f      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d148      	bne.n	80014fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800146e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001472:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001480:	f7ff fb12 	bl	8000aa8 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fb0e 	bl	8000aa8 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e030      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x734>
 80014a6:	e028      	b.n	80014fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d023      	beq.n	80014f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_RCC_OscConfig+0x780>)
 80014b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff faf5 	bl	8000aa8 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c0:	e00c      	b.n	80014dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff faf1 	bl	8000aa8 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d905      	bls.n	80014dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e013      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ec      	bne.n	80014c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	4905      	ldr	r1, [pc, #20]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_RCC_OscConfig+0x7b4>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	60cb      	str	r3, [r1, #12]
 80014f4:	e001      	b.n	80014fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	feeefffc 	.word	0xfeeefffc

0800150c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0e7      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b75      	ldr	r3, [pc, #468]	; (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d910      	bls.n	8001550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b72      	ldr	r3, [pc, #456]	; (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 0207 	bic.w	r2, r3, #7
 8001536:	4970      	ldr	r1, [pc, #448]	; (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0cf      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d010      	beq.n	800157e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001568:	429a      	cmp	r2, r3
 800156a:	d908      	bls.n	800157e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b63      	ldr	r3, [pc, #396]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4960      	ldr	r1, [pc, #384]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d04c      	beq.n	8001624 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001592:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d121      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0a6      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015aa:	4b54      	ldr	r3, [pc, #336]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d115      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e09a      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c2:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e08e      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d2:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e086      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015e2:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f023 0203 	bic.w	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4943      	ldr	r1, [pc, #268]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f4:	f7ff fa58 	bl	8000aa8 <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7ff fa54 	bl	8000aa8 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e06e      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 020c 	and.w	r2, r3, #12
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	429a      	cmp	r2, r3
 8001622:	d1eb      	bne.n	80015fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d010      	beq.n	8001652 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800163c:	429a      	cmp	r2, r3
 800163e:	d208      	bcs.n	8001652 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	492b      	ldr	r1, [pc, #172]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d210      	bcs.n	8001682 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 0207 	bic.w	r2, r3, #7
 8001668:	4923      	ldr	r1, [pc, #140]	; (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e036      	b.n	80016f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4918      	ldr	r1, [pc, #96]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d009      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4910      	ldr	r1, [pc, #64]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c0:	f000 f824 	bl	800170c <HAL_RCC_GetSysClockFreq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	490b      	ldr	r1, [pc, #44]	; (8001700 <HAL_RCC_ClockConfig+0x1f4>)
 80016d2:	5ccb      	ldrb	r3, [r1, r3]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_RCC_ClockConfig+0x1f8>)
 80016de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_ClockConfig+0x1fc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f98f 	bl	8000a08 <HAL_InitTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80016ee:	7afb      	ldrb	r3, [r7, #11]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40022000 	.word	0x40022000
 80016fc:	40021000 	.word	0x40021000
 8001700:	08001954 	.word	0x08001954
 8001704:	20015180 	.word	0x20015180
 8001708:	20015184 	.word	0x20015184

0800170c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171a:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001724:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x34>
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	2b0c      	cmp	r3, #12
 8001738:	d121      	bne.n	800177e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d11e      	bne.n	800177e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001740:	4b34      	ldr	r3, [pc, #208]	; (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d107      	bne.n	800175c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800174c:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e005      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001768:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <HAL_RCC_GetSysClockFreq+0x10c>)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10d      	bne.n	8001794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b04      	cmp	r3, #4
 8001782:	d102      	bne.n	800178a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_RCC_GetSysClockFreq+0x110>)
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	e004      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b08      	cmp	r3, #8
 800178e:	d101      	bne.n	8001794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_RCC_GetSysClockFreq+0x114>)
 8001792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d134      	bne.n	8001804 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d003      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0xac>
 80017b0:	e005      	b.n	80017be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_RCC_GetSysClockFreq+0x110>)
 80017b4:	617b      	str	r3, [r7, #20]
      break;
 80017b6:	e005      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ba:	617b      	str	r3, [r7, #20]
      break;
 80017bc:	e002      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	617b      	str	r3, [r7, #20]
      break;
 80017c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	3301      	adds	r3, #1
 80017d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	fb03 f202 	mul.w	r2, r3, r2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_RCC_GetSysClockFreq+0x108>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	0e5b      	lsrs	r3, r3, #25
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	3301      	adds	r3, #1
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001804:	69bb      	ldr	r3, [r7, #24]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	08001964 	.word	0x08001964
 800181c:	00f42400 	.word	0x00f42400
 8001820:	007a1200 	.word	0x007a1200

08001824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800183c:	f7ff fa26 	bl	8000c8c <HAL_PWREx_GetVoltageRange>
 8001840:	6178      	str	r0, [r7, #20]
 8001842:	e014      	b.n	800186e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	4a24      	ldr	r2, [pc, #144]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184e:	6593      	str	r3, [r2, #88]	; 0x58
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800185c:	f7ff fa16 	bl	8000c8c <HAL_PWREx_GetVoltageRange>
 8001860:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001874:	d10b      	bne.n	800188e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b80      	cmp	r3, #128	; 0x80
 800187a:	d919      	bls.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2ba0      	cmp	r3, #160	; 0xa0
 8001880:	d902      	bls.n	8001888 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001882:	2302      	movs	r3, #2
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	e013      	b.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	e010      	b.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b80      	cmp	r3, #128	; 0x80
 8001892:	d902      	bls.n	800189a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001894:	2303      	movs	r3, #3
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	e00a      	b.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b80      	cmp	r3, #128	; 0x80
 800189e:	d102      	bne.n	80018a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018a0:	2302      	movs	r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e004      	b.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b70      	cmp	r3, #112	; 0x70
 80018aa:	d101      	bne.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018ac:	2301      	movs	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 0207 	bic.w	r2, r3, #7
 80018b8:	4909      	ldr	r1, [pc, #36]	; (80018e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d001      	beq.n	80018d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40022000 	.word	0x40022000

080018e4 <__libc_init_array>:
 80018e4:	b570      	push	{r4, r5, r6, lr}
 80018e6:	4d0d      	ldr	r5, [pc, #52]	; (800191c <__libc_init_array+0x38>)
 80018e8:	4c0d      	ldr	r4, [pc, #52]	; (8001920 <__libc_init_array+0x3c>)
 80018ea:	1b64      	subs	r4, r4, r5
 80018ec:	10a4      	asrs	r4, r4, #2
 80018ee:	2600      	movs	r6, #0
 80018f0:	42a6      	cmp	r6, r4
 80018f2:	d109      	bne.n	8001908 <__libc_init_array+0x24>
 80018f4:	4d0b      	ldr	r5, [pc, #44]	; (8001924 <__libc_init_array+0x40>)
 80018f6:	4c0c      	ldr	r4, [pc, #48]	; (8001928 <__libc_init_array+0x44>)
 80018f8:	f000 f820 	bl	800193c <_init>
 80018fc:	1b64      	subs	r4, r4, r5
 80018fe:	10a4      	asrs	r4, r4, #2
 8001900:	2600      	movs	r6, #0
 8001902:	42a6      	cmp	r6, r4
 8001904:	d105      	bne.n	8001912 <__libc_init_array+0x2e>
 8001906:	bd70      	pop	{r4, r5, r6, pc}
 8001908:	f855 3b04 	ldr.w	r3, [r5], #4
 800190c:	4798      	blx	r3
 800190e:	3601      	adds	r6, #1
 8001910:	e7ee      	b.n	80018f0 <__libc_init_array+0xc>
 8001912:	f855 3b04 	ldr.w	r3, [r5], #4
 8001916:	4798      	blx	r3
 8001918:	3601      	adds	r6, #1
 800191a:	e7f2      	b.n	8001902 <__libc_init_array+0x1e>
 800191c:	08001994 	.word	0x08001994
 8001920:	08001994 	.word	0x08001994
 8001924:	08001994 	.word	0x08001994
 8001928:	08001998 	.word	0x08001998

0800192c <memset>:
 800192c:	4402      	add	r2, r0
 800192e:	4603      	mov	r3, r0
 8001930:	4293      	cmp	r3, r2
 8001932:	d100      	bne.n	8001936 <memset+0xa>
 8001934:	4770      	bx	lr
 8001936:	f803 1b01 	strb.w	r1, [r3], #1
 800193a:	e7f9      	b.n	8001930 <memset+0x4>

0800193c <_init>:
 800193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193e:	bf00      	nop
 8001940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001942:	bc08      	pop	{r3}
 8001944:	469e      	mov	lr, r3
 8001946:	4770      	bx	lr

08001948 <_fini>:
 8001948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194a:	bf00      	nop
 800194c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194e:	bc08      	pop	{r3}
 8001950:	469e      	mov	lr, r3
 8001952:	4770      	bx	lr
